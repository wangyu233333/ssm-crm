package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.model.Activity;
import com.bjpowernode.crm.workbench.model.ClueActivityRelation;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue May 24 14:49:51 CST 2022
     */
    int deleteByPrimaryKey(String id);


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue May 24 14:49:51 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue May 24 14:49:51 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue May 24 14:49:51 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue May 24 14:49:51 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     *
     * @param activity
     * @return
     */
    int insertActivity(Activity activity);


    /**
     * 根据条件分页查询市场活动列表
     *
     * @param map
     * @return
     */
    List<Activity> selectActivityConditionForPage(Map<String, Object> map);

    /**
     * 根据条件查询市场活动总条数
     *
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String, Object> map);

    /**
     * 根据ids批量删除市场活动
     *
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    //  根据id查询市场活动
    Activity selectActivityById(String id);

    //  保存更新的市场活动活动
    int updateActivity(Activity activity);

    //  查询所有的市场活动
    List<Activity> selectAllActivitys();

    //  根据ID查询市场活动
    List<Activity> selectActivityByIds(String[] ids);

    //  批量插入市场活动
    int insertActivityByList(List<Activity> activityList);

    //  根据id查询市场活动明细信息
    Activity selectActivityForDetailById(String id);

    //  根据 ClueId 查询相关联的市场活动
    List<Activity> selectActivityForDetailByClueId(String clueId);


    //  根据 name模糊查询市场活动，并且把已经跟 clueId关联的市场活动排除
    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);

    //  根据id组合数组查询市场活动
    List<Activity> selectActivityForDetailByIds(String[] ids);


    //  根据 name模糊关联的查询市场活动
    List<Activity> selectActivityForConvertByNameClueId(Map<String, Object> map);

}